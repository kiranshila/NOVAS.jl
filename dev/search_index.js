var documenterSearchIndex = {"docs":
[{"location":"benchmarks/#Benchmarks","page":"Benchmarks","title":"Benchmarks","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Here is a comparison of the runtime speed of every function implemented. This is run of GitHub CI with system specs of:","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"using InteractiveUtils\nversioninfo()","category":"page"},{"location":"benchmarks/#Results","page":"Benchmarks","title":"Results","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"using BenchmarkTools, DataFrames\nimport NOVAS\n# Include un-exported c wrappers\ninclude(\"../../test/wrapper.jl\")\n\nresults = DataFrame(fname=[],c_time=[],julia_time=[])\n\n# Utilities\nc_fund_args      = mean(@benchmark fund_args($rand())).time\njulia_fund_args  = mean(@benchmark NOVAS.fund_args($rand())).time\npush!(results,(\"fund_args\",c_fund_args,julia_fund_args))\n\nc_norm_ang       = mean(@benchmark norm_ang($rand())).time\njulia_norm_ang   = mean(@benchmark NOVAS.norm_ang($rand())).time\npush!(results,(\"norm_ang\",c_norm_ang,julia_norm_ang))\n\nc_ee_ct_full     = mean(@benchmark ee_ct($rand(),$rand(),0)).time\njulia_ee_ct_full = mean(@benchmark NOVAS.ee_ct($rand(),$rand();accuracy=:full)).time\npush!(results,(\"ee_ct (full accuracy)\",c_ee_ct_full,julia_ee_ct_full))\n\nc_ee_ct_reduced     = mean(@benchmark ee_ct($rand(),$rand(),1)).time\njulia_ee_ct_reduced = mean(@benchmark NOVAS.ee_ct($rand(),$rand();accuracy=:reduced)).time\npush!(results,(\"ee_ct (reduced accuracy)\",c_ee_ct_reduced,julia_ee_ct_reduced))\n\n# Nutation\nc_nu2000k     =  mean(@benchmark nu2000k($rand(),$rand())).time\njulia_nu2000k =  mean(@benchmark NOVAS.nu2000k($rand(),$rand())).time \npush!(results,(\"nu2000k\",c_nu2000k,julia_nu2000k))\n\nc_iau2000a     =  mean(@benchmark iau2000a($rand(),$rand())).time\njulia_iau2000a =  mean(@benchmark NOVAS.iau2000a($rand(),$rand())).time \npush!(results,(\"iau2000a\",c_iau2000a,julia_iau2000a))","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"results","category":"page"},{"location":"api/#API-(Exported-Functions)","page":"API","title":"API (Exported Functions)","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [NOVAS]\nOrder = [:function,:type]\nPrivate = false","category":"page"},{"location":"api/#NOVAS.cel_pole-Tuple{Real, Symbol, Real, Real}","page":"API","title":"NOVAS.cel_pole","text":"cel_pole(tjd)\n\nComputes the celestial pole offsets for high-precision applications. Each set of offsets is a correction to the modeled position of the pole for a specific date, derived from observations and published by the IERS.\n\nThis function differs from the C version, where this returns the corrections instead of mutating global state.\n\nArguments\n\ntjd::Real: TDB or TT Julian date for pole offsets\ntype::Symbol=:angular: Type of pole offset. :angular for corrections to angular    coordinates of modeled pole referred to mean ecliptic of date, that is,    delta-delta-psi and delta-delta-epsilon. :positional for corrections to components   of modeled pole unit vector referred to GCRS axes, that is, dx and dy.\ndople1: Value of celestial pole offset in first coordinate.\ndpole2: Value of celestial pole offset is second coordinate.\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.cio_basis-Tuple{Real, Real}","page":"API","title":"NOVAS.cio_basis","text":"cio_basis(jd_tdb,ra_cio)\n\nComputes the orthonomal basis vectors, with respect to the GCRS of the celestial intermediate system defined by the celestial intermediate pole and origin.\n\nArguments\n\njd_tdb::Real: TDB Julian Date\nra_cio::Real: Right ascension of the CIO at epoch (hours)\n\nOptional Arguments\n\naccuracy::Symbol=:full: Either :full or :reduced accuracy\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.cio_location-Tuple{Real}","page":"API","title":"NOVAS.cio_location","text":"ciolocation(jdtdb)\n\nComputes the location of the celestial intermediate origin (CIO) for a given Julian date, as a right ascension with respect to the true equinox of date.\n\nArguments\n\njd_tdb::Real: TDB Julian Date\n\nOptional Arguments\n\naccuracy::Symbol=:full: Either :full or :reduced accuracy\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.e_tilt-Tuple{Real}","page":"API","title":"NOVAS.e_tilt","text":"e_tilt(jd_tdb)\n\nComputes quantities related to the orientation of the Earth's rotation axis at Julian date jd_tdb\n\nArguments\n\njd_tdb::Real: TDB Julian Date\n\nOptional Arguments\n\naccuracy::Symbol=:full: Sets the accuracy level of :full or :reduced\n\nReturns\n\n(mobl,tobl,ee,dpsi,deps) where\n\nmobl: Mean obliquity of the ecliptic in degrees\ntobl: True obliquity of the ecliptic in degrees\nee: Equation of the equinoxes in seconds of time\ndpsi: Nutation in longitude on arcseconds\ndeps: Nutation in obliquity in arcseconds\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.ee_ct-Union{Tuple{T}, Tuple{T, T}} where T<:Real","page":"API","title":"NOVAS.ee_ct","text":"ee_ct(jd)\n\nComputes the \"complementary terms\" of the equation of the equinoxes.\n\nArguments\n\njd_high::Real: High-order part of UT1 Julian date\njd_low::Real: Low-order part of UT1 Julian date\n\nOptional Arguments\n\naccuracy::Symbol=:full: Sets the accuracy level of :full or :reduced\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.equ2hor-Tuple{Real, Real, Real, Real, OnSurface}","page":"API","title":"NOVAS.equ2hor","text":"equ2hor(jd_ut1,delta_t,ra,dec)\n\nThis function transforms topocentric right ascension and declination to zenith distance and azimuth.  It uses a method that properly accounts for polar motion, which is significant at the sub-arcsecond level.  This function can also adjust coordinates for atmospheric refraction.\n\nxp and yp are only needed if sub-arcsecond accuracy is needed.\n\nArguments\n\njd_ut1::Real: UT1 Julian Date\ndelta_t::Real: Difference TT-UT1 ast jd_ut1 in seconds\nra::Real: Topocentric right ascension in hours, referred to true equator\ndec::Real: Topocentric declination in degrees, referred to true equatior\nlocation::OnSurface: Structure containing observer's location details\n\nOptional arguments\n\naccuracy::Symbol=:full: Either :full or :reduced accuracy\nxp::Real=0: x coordinate of the celestial intermediate pole in arcseconds\nyp::Real=0: y coordinate of the celestial intermediate pole in arcseconds\nref_option::Symbol=:none: Whether to include refraction in the calculations.\n\nEither :none, :standard to use standard atmospheric conditions, or :location to use the conditions included in location.\n\nReturns\n\n(zd,az,rar,decr) where\n\nzd: Topocentric zenith distance in degrees\naz: Topocentric azimuth (east of north) in degrees\nrar: Topocentric RA of object of interest in hours\ndecr: Topocentric declination of object of interest in degrees\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.era","page":"API","title":"NOVAS.era","text":"era(jd_high)\n\nThis function returns the value of the earth rotation angle (theta in degrees) for a given UT1 Julian date.\n\nArguments\n\njd_high::Real: High-order part of UT1 Julian date\njd_low::Real=0.0: Low-order part of UT1 Julian date\n\n\n\n\n\n","category":"function"},{"location":"api/#NOVAS.frame_tie-Tuple{AbstractVector{T} where T, Symbol}","page":"API","title":"NOVAS.frame_tie","text":"frame_tie(pos;direction)\n\nTransforms a position vector from the dynamical reference system to ICRS, or vice versa.\n\nArgumenets\n\npos::AbstractVector: Position vector, equitorial rectangular coordinates\ndirection::Symbol: Transformation direction, :dynamic2icrs or :icrs2dynamic\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.fund_args-Tuple{Real}","page":"API","title":"NOVAS.fund_args","text":"fund_args(t)\n\nComputes the fundamental arguments (mean elements) of the Sun and Moon.\n\nArguments\n\n-t::Real: TDB time in Julian centuries since J2000.0\n\nReturns\n\n[l,l′,F,D,Ω] where -l: Mean anomaly of the Moon -l′: Mean anomaly of the Sun -F: mean argument of the latitude of the Moon -D: Mean elongation of the Moon from the Sun -Ω Mean longitude of the Moon's ascending node\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.iau2000a","page":"API","title":"NOVAS.iau2000a","text":"iau2000a(jd)\n\nCompute the forced nutation of the non-rigid earth based on the IAU 2000A nutation model.\n\nArguments\n\n-jd_high::Real: High order part of the TT Julian date -jd_low::Real=0.0: Low order part of the TT Julian date\n\nReturn\n\n(dpsi,deps) where -dpsi: Nutation (luni-solar + planetary) in longitude, in radians -deps: Nutation (luni-solar + planetary) in obliquity, in radians\n\n\n\n\n\n","category":"function"},{"location":"api/#NOVAS.ira_equinox-Tuple{Real}","page":"API","title":"NOVAS.ira_equinox","text":"ira_equinox(jd_tdb)\n\nComputes the intermediate right ascension of the equinox at the input Julian date using an analytical expression for the accumulated precession in right ascension. For the true equinox, the result is the equation of the origins.\n\nArguments\n\njd_tdb::Real: TDB Julian Date\n\nOptional Arguments\n\naccuracy::Symbol=:full: Either :full or :reduced accuracy\nequinox::Symbol=:mean: Either :mean or :true\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.mean_obliq-Tuple{Real}","page":"API","title":"NOVAS.mean_obliq","text":"mean_obliq(jd_tdb)\n\nComputes the mean obliquity of the ecliptic\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.norm_ang-Tuple{Real}","page":"API","title":"NOVAS.norm_ang","text":"norm_ang(θ)\n\nNormalizes an angle into range 0 <= θ <= 2π\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.nu2000k","page":"API","title":"NOVAS.nu2000k","text":"nu2000k(jd)\n\nCompute the forced nutation of the non-rigid earth based on the NU2000K nutation model.\n\nArguments\n\n-jd_high::Real: High order part of the TT Julian date -jd_low::Real=0.0: Low order part of the TT Julian date\n\nReturn\n\n(dpsi,deps) where -dpsi: Nutation (luni-solar + planetary) in longitude, in radians -deps: Nutation (luni-solar + planetary) in obliquity, in radians\n\n\n\n\n\n","category":"function"},{"location":"api/#NOVAS.nutation-Tuple{Real, AbstractVector{T} where T}","page":"API","title":"NOVAS.nutation","text":"nutation(jd_tdb,pos)\n\nNutates equitorial rectangular coordinates from mean equator and equinox of epoch to true equator or does the transformation in reverse given the flag direction.\n\nArguments\n\njd_tdb::Real: TDB Julian Date\npos::AbstractVector: Position vector, geocentric equatorial rectangular coordinates, referred to mean equator and equinox of epoch\n\nOptional Arguments\n\naccuracy::Symbol=:full: Either :full or :reduced accuracy\ndirection::Symbol=:mean2true: Perform the transformation in either the :mean2true or :true2mean direction\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.nutation_angles-Tuple{Real}","page":"API","title":"NOVAS.nutation_angles","text":"nutation_angles(t)\n\nComputes the values for nutation in longitude and nutation in obliquity for a given TDB julian date.\n\nAruments\n\nt::Real: TDB time in Julian centuries since J2000.0\n\nOptional Arguments\n\naccuracy::Symbol=:full: Sets the accuracy level of :full or :reduced\n\nReturns\n\n(dpsi,deps) where\n\ndpsi: Nutation in longitude in arcseconds\ndeps: Nutation in obliquity in arcseconds\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.precession-Tuple{Real, AbstractVector{T} where T, Real}","page":"API","title":"NOVAS.precession","text":"precession(jd_tdb1,pos,jd_tdb2)\n\nPrecesses equatorial rectangular coordinates from one epoch to another. One of the two epochs must be J200.0.\n\nArguments\n\njd_tdb1::Real: TDB Julian Date of first epoch\njd_tdb2::Real: TDB Julian Date of second epoch\npos::AbstractVector: Position vector, geocentric equatorial rectangular coordinates, referred to mean dynamical equator and equinox of first epoch\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.refract-Tuple{OnSurface, Real}","page":"API","title":"NOVAS.refract","text":"refract(location,zd_obs)\n\nComputes the atmospheric refraction in zenith distance. This is approximate for optical wavelengths.\n\nArguments\n\nlocation::OnSurface: The observation location\nzd_obs::Real: Observed zenith distance, in degrees\n\nOptional Arguments\n\nref_option::Symbol=:standard: Either :standard to use standard atmospheric conditions, or :location to use the conditions included in location.\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.sidereal_time","page":"API","title":"NOVAS.sidereal_time","text":"sidereal_time(jd_ut1,0,delta_t)\n\nComputes the Greenwich sidereal time, either mean or apparent, at Julian date jd_high + jd_low in hours. See Chapter 5 in the NOVASC manual for information between equinox and CIO-based methods.\n\nArguments\n\njd_high::Real: high-order part of UT1 Julian date\njd_low::Real=0: low-order part of UT1 Julian date\ndelta_t::Real=0: Difference TT-UT1 at jd_high + jd_low in seconds\n\nOptional arguments\n\ngst_type::Symbol=:mean: Return results as mean (:mean) or apparent (:apparent) time\nmethod::Symbol=:CIO: Computation method, :CIO-based or :equinox-based\naccuracy::Symbol=:full: Either :full or :reduced accuracy\n\n\n\n\n\n","category":"function"},{"location":"api/#NOVAS.spin-Tuple{Real, AbstractVector{T} where T}","page":"API","title":"NOVAS.spin","text":"spin(angle,pos)\n\nTransfroms a vector from one coordiate system to another with the same origin and axes rotated about the z-axis.\n\nArguments\n\nangle::Real: Angle of rotation, positive counterclockwise when viewed from +z, in degrees\npos::AbstractVector: Position Vector\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.tdb2tt-Tuple{Real}","page":"API","title":"NOVAS.tdb2tt","text":"tdb2tt(tdb_jd)\n\nComputes the Terrestrial Time (TT) or Terrestrial Dynamic Time (TDT) Julian date corresponding to a Barrycentric Dynamical Time (TDB) Julian Date)\n\nArguments\n\ntdb_jd::Real: TDB Julian date\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.ter2cel-Tuple{Real, Real, Real, AbstractVector{T} where T}","page":"API","title":"NOVAS.ter2cel","text":"ter2cel(jd_ut_high,jd_ut_low,delta_t,vec)\n\nRotates a vector from the terrestrial to the celestial system. Specifically, it transforms a vector in ITRS to GCRS by applying rotations for polar motion, Earth rotation, nutation, precession, and the dynamical-to-GCRS frame tie.\n\nArguments\n\njd_ut_high::Real: High order part of UT1 Julian date\njd_ut_low::Real: Low order part of UT1 Julian date\ndelta_t::Real: Value of TT-UT1 at the input date\nvec::AbstractVector: Position vector, geocentric equatorial rectangular coordinates, reference axes set by option\n\nOptional Arguments\n\nmethod::Symbol=:CIO: Computation method, :CIO-based or :equinox-based\naccuracy::Symbol=:full: Either :full or :reduced accuracy\noption::Symbol=:GRCS: Sets position vector to be referred to :GCRS axes or :equinox of date and equator\nxp::Real=0: x coordinate of the celestial intermediate pole in arcseconds\nyp::Real=0: y coordinate of the celestial intermediate pole in arcseconds\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.wobble-Tuple{Real, Real, Real, AbstractVector{T} where T}","page":"API","title":"NOVAS.wobble","text":"wobble(tjd,xp,yp,pos)\n\nCorrects a vector in the ITRS (rotating Earth-fixed system) for polar motion, and also corrects the longitude origin (by a tiny amount) to the Terrestrial Intermediate Origin (TIO).  The ITRS vector is thereby transformed to the terrestrial intermediate system, based on the true (rotational) equator and TIO.  Because the true equator is the plane orthogonal to the direction of the Celestial Intermediate Pole (CIP), the components of the output vector are referred to z and x axes toward the CIP and TIO, respectively.\n\nArguments\n\ntjd::Real: TT or UT1 Julian Date\nxp::Real: Conventionally-defined X coordinate of the CIP in arcseconds\nyp::Real: Conventionally-defined Y coordinate of the CIP in arcseconds\npos::AbstractVector: Position vector, geocentric equatorial rectangular coordinates\n\nOptional Arguments\n\ndirection::Symbol=:itrs2terr: Either :itrs2terr or :terr2itrs\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.OnSurface","page":"API","title":"NOVAS.OnSurface","text":"OneSurface(lat,lon,h,temp,p)\n\nStructure holding the observer's location on the surface of the Earth.  Atmospheric parameters are optional and are only used by equ2hor in the calculation of refraction.\n\nArguments\n\nlatitude::Real: ITRS latitude in degrees; north positive\nlongitude::Real: ITRS longitude in degrees; east positive\nheight::Real: Height of observer (meters)\ntemperature::Real=0: Temperature (degrees Celsius)\npressure::Real=0: Atmospheric pressure (millibars)\n\n\n\n\n\n","category":"type"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Calculating-Sidereal-Time","page":"Examples","title":"Calculating Sidereal Time","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"In this example, we will calculate the Greenwich mean sidereal time.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using NOVAS","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"First, we need to pull in AstroTime.jl to give us the most preceise time correction data and transformations. We will also call it's update routine.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using AstroTime\nAstroTime.update()","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Next, we will use the current Julian UT1 date.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"ut1_now = from_utc(now(); scale=UT1)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Then, we will use AstroTime to convert this date to a Julian date and give us the current offset to Terrestrial Time","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"jd_high, jd_low = julian_twopart(ut1_now) .|> value\nΔT = getoffset(ut1_now,TT)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Finally, we will call sidereal_time to find the Greenwich mean sidereal time using the CIO method with full accuracy","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"sidereal_time(jd_high,jd_low,ΔT)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"And because this is Julia, we can easily compose with other libraries, like Measurements.jl. For example, we can add uncertainty data to ΔT and see how it impacts our results","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Measurements\nsidereal_time(jd_high,jd_low,ΔT±3)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = NOVAS","category":"page"},{"location":"#NOVAS","page":"Home","title":"NOVAS","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NOVAS.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"examples.md\", \"benchmarks.md\", \"api.md\"]\nDepth = 3","category":"page"}]
}
