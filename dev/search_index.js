var documenterSearchIndex = {"docs":
[{"location":"benchmarks/#Benchmarks","page":"Benchmarks","title":"Benchmarks","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Here is a comparison of the runtime speed of every function implemented. This is run of GitHub CI with system specs of:","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"using InteractiveUtils\nversioninfo()","category":"page"},{"location":"benchmarks/#Results","page":"Benchmarks","title":"Results","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"using CSV, DataFrames","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"DataFrame(CSV.File(\"../../benchmarks.csv\"))","category":"page"},{"location":"api/#API-(Exported-Functions)","page":"API","title":"API (Exported Functions)","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [NOVAS]\nOrder = [:function,:type]\nPrivate = false","category":"page"},{"location":"api/#NOVAS.app_star-Tuple{Real, CatEntry}","page":"API","title":"NOVAS.app_star","text":"app_star(jd_tt,star)\n\nComputes the apparent place of a star at date jd_tt, givne its catalog mean place, proper motion, parallax, and radial velocity.\n\nArguments\n\njd_tt::Real: TT Julian date for apparent place\nstar::CatEntry: Catalog entry structure containing catalog data for the object in the ICRS\n\nOptional arguments\n\naccuracy::Symbol=:full: Either :full or :reduced accuracy\n\nReturns\n\n(ra,dec) where\n\nra: Apparent right ascension in hours\ndec: Apparent declination in degrees\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.cel_pole-Tuple{Real, Symbol, Real, Real}","page":"API","title":"NOVAS.cel_pole","text":"cel_pole(tjd)\n\nComputes the celestial pole offsets for high-precision applications. Each set of offsets is a correction to the modeled position of the pole for a specific date, derived from observations and published by the IERS.\n\nThis function differs from the C version, where this returns the corrections instead of mutating global state.\n\nArguments\n\ntjd::Real: TDB or TT Julian date for pole offsets\ntype::Symbol=:angular: Type of pole offset. :angular for corrections to angular    coordinates of modeled pole referred to mean ecliptic of date, that is,    delta-delta-psi and delta-delta-epsilon. :positional for corrections to components   of modeled pole unit vector referred to GCRS axes, that is, dx and dy.\ndople1: Value of celestial pole offset in first coordinate.\ndpole2: Value of celestial pole offset is second coordinate.\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.cio_basis-Tuple{Real, Real}","page":"API","title":"NOVAS.cio_basis","text":"cio_basis(jd_tdb,ra_cio)\n\nComputes the orthonomal basis vectors, with respect to the GCRS of the celestial intermediate system defined by the celestial intermediate pole and origin.\n\nArguments\n\njd_tdb::Real: TDB Julian Date\nra_cio::Real: Right ascension of the CIO at epoch (hours)\n\nOptional Arguments\n\naccuracy::Symbol=:full: Either :full or :reduced accuracy\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.cio_location-Tuple{Real}","page":"API","title":"NOVAS.cio_location","text":"ciolocation(jdtdb)\n\nComputes the location of the celestial intermediate origin (CIO) for a given Julian date, as a right ascension with respect to the true equinox of date.\n\nArguments\n\njd_tdb::Real: TDB Julian Date\n\nOptional Arguments\n\naccuracy::Symbol=:full: Either :full or :reduced accuracy\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.de440-Tuple{}","page":"API","title":"NOVAS.de440","text":"de440()\n\nRetrives and gives the location of the JPL DE440 Planetary Ephemeris\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.e_tilt-Tuple{T} where T<:Real","page":"API","title":"NOVAS.e_tilt","text":"e_tilt(jd_tdb)\n\nComputes quantities related to the orientation of the Earth's rotation axis at Julian date jd_tdb\n\nArguments\n\njd_tdb::Real: TDB Julian Date\n\nOptional Arguments\n\naccuracy::Symbol=:full: Sets the accuracy level of :full or :reduced\n\nReturns\n\n(mobl,tobl,ee,dpsi,deps) where\n\nmobl: Mean obliquity of the ecliptic in degrees\ntobl: True obliquity of the ecliptic in degrees\nee: Equation of the equinoxes in seconds of time\ndpsi: Nutation in longitude on arcseconds\ndeps: Nutation in obliquity in arcseconds\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.ee_ct-Union{Tuple{T}, Tuple{T, T}} where T<:Real","page":"API","title":"NOVAS.ee_ct","text":"ee_ct(jd_high, jd_low)\n\nComputes the \"complementary terms\" of the equation of the equinoxes.\n\nArguments\n\njd_high::Real: High-order part of UT1 Julian date\njd_low::Real: Low-order part of UT1 Julian date\n\nOptional Arguments\n\naccuracy::Symbol=:full: Sets the accuracy level of :full or :reduced\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.equ2hor-Tuple{Real, Real, Real, Real, OnSurface}","page":"API","title":"NOVAS.equ2hor","text":"equ2hor(jd_ut1,delta_t,ra,dec)\n\nThis function transforms topocentric right ascension and declination to zenith distance and azimuth.  It uses a method that properly accounts for polar motion, which is significant at the sub-arcsecond level.  This function can also adjust coordinates for atmospheric refraction.\n\nxp and yp are only needed if sub-arcsecond accuracy is needed.\n\nArguments\n\njd_ut1::Real: UT1 Julian Date\ndelta_t::Real: Difference TT-UT1 ast jd_ut1 in seconds\nra::Real: Topocentric right ascension in hours, referred to true equator\ndec::Real: Topocentric declination in degrees, referred to true equatior\nlocation::OnSurface: Structure containing observer's location details\n\nOptional arguments\n\naccuracy::Symbol=:full: Either :full or :reduced accuracy\nxp::Real=0: x coordinate of the celestial intermediate pole in arcseconds\nyp::Real=0: y coordinate of the celestial intermediate pole in arcseconds\nref_option::Symbol=:none: Whether to include refraction in the calculations.\n\nEither :none, :standard to use standard atmospheric conditions, or :location to use the conditions included in location.\n\nReturns\n\n(zd,az,rar,decr) where\n\nzd: Topocentric zenith distance in degrees\naz: Topocentric azimuth (east of north) in degrees\nrar: Topocentric RA of object of interest in hours\ndecr: Topocentric declination of object of interest in degrees\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.era","page":"API","title":"NOVAS.era","text":"era(jd_high)\n\nThis function returns the value of the earth rotation angle (theta in degrees) for a given UT1 Julian date.\n\nArguments\n\njd_high::Real: High-order part of UT1 Julian date\njd_low::Real=0.0: Low-order part of UT1 Julian date\n\n\n\n\n\n","category":"function"},{"location":"api/#NOVAS.frame_tie-Tuple{AbstractVector{T} where T, Symbol}","page":"API","title":"NOVAS.frame_tie","text":"frame_tie(pos;direction)\n\nTransforms a position vector from the dynamical reference system to ICRS, or vice versa.\n\nArgumenets\n\npos::AbstractVector: Position vector, equitorial rectangular coordinates\ndirection::Symbol: Transformation direction, :dynamic2icrs or :icrs2dynamic\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.fund_args-Tuple{T} where T<:Real","page":"API","title":"NOVAS.fund_args","text":"fund_args(t)\n\nComputes the fundamental arguments (mean elements) of the Sun and Moon.\n\nArguments\n\nt::Real: TDB time in Julian centuries since J2000.0\n\nReturns\n\n[l,l′,F,D,Ω] where\n\nl: Mean anomaly of the Moon\nl′: Mean anomaly of the Sun\nF: mean argument of the latitude of the Moon\nD: Mean elongation of the Moon from the Sun\nΩ Mean longitude of the Moon's ascending node\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.iau2000a","page":"API","title":"NOVAS.iau2000a","text":"iau2000a(jd)\n\nCompute the forced nutation of the non-rigid earth based on the IAU 2000A nutation model.\n\nArguments\n\njd_high::Real: High order part of the TT Julian date\njd_low::Real=0.0: Low order part of the TT Julian date\n\nReturn\n\n(dpsi,deps) where\n\ndpsi: Nutation (luni-solar + planetary) in longitude, in radians\ndeps: Nutation (luni-solar + planetary) in obliquity, in radians\n\n\n\n\n\n","category":"function"},{"location":"api/#NOVAS.ira_equinox-Tuple{Real}","page":"API","title":"NOVAS.ira_equinox","text":"ira_equinox(jd_tdb)\n\nComputes the intermediate right ascension of the equinox at the input Julian date using an analytical expression for the accumulated precession in right ascension. For the true equinox, the result is the equation of the origins.\n\nArguments\n\njd_tdb::Real: TDB Julian Date\n\nOptional Arguments\n\naccuracy::Symbol=:full: Either :full or :reduced accuracy\nequinox::Symbol=:mean: Either :mean or :true\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.mean_obliq-Tuple{Real}","page":"API","title":"NOVAS.mean_obliq","text":"mean_obliq(jd_tdb)\n\nComputes the mean obliquity of the ecliptic\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.norm_ang-Tuple{Real}","page":"API","title":"NOVAS.norm_ang","text":"norm_ang(θ)\n\nNormalizes an angle into range 0 <= θ <= 2π\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.nu2000k","page":"API","title":"NOVAS.nu2000k","text":"nu2000k(jd)\n\nCompute the forced nutation of the non-rigid earth based on the NU2000K nutation model.\n\nArguments\n\njd_high::Real: High order part of the TT Julian date\njd_low::Real=0.0: Low order part of the TT Julian date\n\nReturn\n\n(dpsi,deps) where\n\ndpsi: Nutation (luni-solar + planetary) in longitude, in radians\ndeps: Nutation (luni-solar + planetary) in obliquity, in radians\n\n\n\n\n\n","category":"function"},{"location":"api/#NOVAS.nu2000k-Tuple{String}","page":"API","title":"NOVAS.nu2000k","text":"nu2000k(file)\n\nRetrives and gives the location of a file from the NU2000k nutation model\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.nutation-Tuple{Real, AbstractVector{T} where T}","page":"API","title":"NOVAS.nutation","text":"nutation(jd_tdb,pos)\n\nNutates equitorial rectangular coordinates from mean equator and equinox of epoch to true equator or does the transformation in reverse given the flag direction.\n\nArguments\n\njd_tdb::Real: TDB Julian Date\npos::AbstractVector: Position vector, geocentric equatorial rectangular coordinates, referred to mean equator and equinox of epoch\n\nOptional Arguments\n\naccuracy::Symbol=:full: Either :full or :reduced accuracy\ndirection::Symbol=:mean2true: Perform the transformation in either the :mean2true or :true2mean direction\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.nutation_angles-Tuple{Real}","page":"API","title":"NOVAS.nutation_angles","text":"nutation_angles(t)\n\nComputes the values for nutation in longitude and nutation in obliquity for a given TDB julian date.\n\nAruments\n\nt::Real: TDB time in Julian centuries since J2000.0\n\nOptional Arguments\n\naccuracy::Symbol=:full: Sets the accuracy level of :full or :reduced\n\nReturns\n\n(dpsi,deps) where\n\ndpsi: Nutation in longitude in arcseconds\ndeps: Nutation in obliquity in arcseconds\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.place-Tuple{Real, Object, Observer, Real}","page":"API","title":"NOVAS.place","text":" place(jd_tt,cel_obj,location,ΔT)\n\nComputes the apparent direction of a star or solar system body at a specified time an in a specified coordinate system.\n\nArguments\n\njd_tt::Real: TT Julian date for place\ncel_obj::Object: The celestial object of interest\nlocation::Observer: The location of the observer\ndelta_t::Real: Difference TT-UT1 at jd_tt in seconds\n\nOptional arguments\n\ncoord_sys::Symbol=:GCRS Specifies the coordinate system of the output position.\n\nEither :GCRS, :true equator and equinox, true equator and :CIO of date, or :astrometric coordinates.\n\naccuracy::Symbol=:full: Either :full or :reduced accuracy\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.precession-Tuple{Real, AbstractVector{T} where T, Real}","page":"API","title":"NOVAS.precession","text":"precession(jd_tdb1,pos,jd_tdb2)\n\nPrecesses equatorial rectangular coordinates from one epoch to another. One of the two epochs must be J200.0.\n\nArguments\n\njd_tdb1::Real: TDB Julian Date of first epoch\njd_tdb2::Real: TDB Julian Date of second epoch\npos::AbstractVector: Position vector, geocentric equatorial rectangular coordinates, referred to mean dynamical equator and equinox of first epoch\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.read_daf-Tuple{Any}","page":"API","title":"NOVAS.read_daf","text":"read_daf(\"filename.daf\")\n\nReads an NAIF Double Precision Array Files (DAF) into a Julia DAFFile\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.refract-Tuple{OnSurface, Real}","page":"API","title":"NOVAS.refract","text":"refract(location,zd_obs)\n\nComputes the atmospheric refraction in zenith distance. This is approximate for optical wavelengths.\n\nArguments\n\nlocation::OnSurface: The observation location\nzd_obs::Real: Observed zenith distance, in degrees\n\nOptional Arguments\n\nref_option::Symbol=:standard: Either :standard to use standard atmospheric conditions, or :location to use the conditions included in location.\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.register_spk!-Tuple{DAFFile}","page":"API","title":"NOVAS.register_spk!","text":"register_spk!(daf)\n\nRegisters the ephemeris data from a DAF file into the global registry\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.sidereal_time","page":"API","title":"NOVAS.sidereal_time","text":"sidereal_time(jd_ut1,0,delta_t)\n\nComputes the Greenwich sidereal time, either mean or apparent, at Julian date jd_high + jd_low in hours. See Chapter 5 in the NOVASC manual for information between equinox and CIO-based methods.\n\nArguments\n\njd_high::Real: high-order part of UT1 Julian date\njd_low::Real=0: low-order part of UT1 Julian date\ndelta_t::Real=0: Difference TT-UT1 at jd_high + jd_low in seconds\n\nOptional arguments\n\ngst_type::Symbol=:mean: Return results as mean (:mean) or apparent (:apparent) time\nmethod::Symbol=:CIO: Computation method, :CIO-based or :equinox-based\naccuracy::Symbol=:full: Either :full or :reduced accuracy\n\n\n\n\n\n","category":"function"},{"location":"api/#NOVAS.spin-Tuple{Real, AbstractVector{T} where T}","page":"API","title":"NOVAS.spin","text":"spin(angle,pos)\n\nTransfroms a vector from one coordiate system to another with the same origin and axes rotated about the z-axis.\n\nArguments\n\nangle::Real: Angle of rotation, positive counterclockwise when viewed from +z, in degrees\npos::AbstractVector: Position Vector\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.state","page":"API","title":"NOVAS.state","text":"state(time,target,center)\n\nEvaluates the state vectors (position and velocity) at a given time for a target and center system.\n\nArguments\n\ntime::Real: Time in TDB seconds since J2000\ntarget::Int: NAIF code for target\ncenter::Int: NAIF code for center\n\nOptional Arguments\n\nreference::Int: NAIF code for reference system\n\n\n\n\n\n","category":"function"},{"location":"api/#NOVAS.tdb2tt-Tuple{Real}","page":"API","title":"NOVAS.tdb2tt","text":"tdb2tt(tdb_jd)\n\nComputes the Terrestrial Time (TT) or Terrestrial Dynamic Time (TDT) Julian date corresponding to a Barrycentric Dynamical Time (TDB) Julian Date)\n\nArguments\n\ntdb_jd::Real: TDB Julian date\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.ter2cel-Tuple{Real, Real, Real, AbstractVector{T} where T}","page":"API","title":"NOVAS.ter2cel","text":"ter2cel(jd_ut_high,jd_ut_low,delta_t,vec)\n\nRotates a vector from the terrestrial to the celestial system. Specifically, it transforms a vector in ITRS to GCRS by applying rotations for polar motion, Earth rotation, nutation, precession, and the dynamical-to-GCRS frame tie.\n\nArguments\n\njd_ut_high::Real: High order part of UT1 Julian date\njd_ut_low::Real: Low order part of UT1 Julian date\ndelta_t::Real: Value of TT-UT1 at the input date\nvec::AbstractVector: Position vector, geocentric equatorial rectangular coordinates, reference axes set by option\n\nOptional Arguments\n\nmethod::Symbol=:CIO: Computation method, :CIO-based or :equinox-based\naccuracy::Symbol=:full: Either :full or :reduced accuracy\noption::Symbol=:GRCS: Sets position vector to be referred to :GCRS axes or :equinox of date and equator\nxp::Real=0: x coordinate of the celestial intermediate pole in arcseconds\nyp::Real=0: y coordinate of the celestial intermediate pole in arcseconds\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.wobble-Tuple{Real, Real, Real, AbstractVector{T} where T}","page":"API","title":"NOVAS.wobble","text":"wobble(tjd,xp,yp,pos)\n\nCorrects a vector in the ITRS (rotating Earth-fixed system) for polar motion, and also corrects the longitude origin (by a tiny amount) to the Terrestrial Intermediate Origin (TIO).  The ITRS vector is thereby transformed to the terrestrial intermediate system, based on the true (rotational) equator and TIO.  Because the true equator is the plane orthogonal to the direction of the Celestial Intermediate Pole (CIP), the components of the output vector are referred to z and x axes toward the CIP and TIO, respectively.\n\nArguments\n\ntjd::Real: TT or UT1 Julian Date\nxp::Real: Conventionally-defined X coordinate of the CIP in arcseconds\nyp::Real: Conventionally-defined Y coordinate of the CIP in arcseconds\npos::AbstractVector: Position vector, geocentric equatorial rectangular coordinates\n\nOptional Arguments\n\ndirection::Symbol=:itrs2terr: Either :itrs2terr or :terr2itrs\n\n\n\n\n\n","category":"method"},{"location":"api/#NOVAS.InSpace","page":"API","title":"NOVAS.InSpace","text":"The observer's location and velocity on a near-Earth spacecraft\n\nArguments\n\nsc_pos::AbstractVector: Geocentric position vector in km\nsc_vel::AbstractVector: Geocentric velocity vector (ẋ,ẏ,ż) in km/s\n\n\n\n\n\n","category":"type"},{"location":"api/#NOVAS.Object","page":"API","title":"NOVAS.Object","text":"A celestial object of interest\n\nArguments\n\ntype::Symbol: :major planet, :minor planet, or :extrasolar\nnumber::Int: Object number. For type=:major, Earth would be 3, etc.\n\nFor :extrasolar objects, set to 0 as the object is fully specified in star.\n\nname::String: Name of object\nstar::Union{Nothing,CatEntry}: Astrometric data for any extrasolar celestial object\n\nConvenience constructors supplied for extrasolar sources where you only need to supply the CatEntry.\n\n\n\n\n\n","category":"type"},{"location":"api/#NOVAS.Observer","page":"API","title":"NOVAS.Observer","text":"The location of an observer. Note, this is quite different from the C version as we will  use the union type to store the location instead of two potentially nil pointers. As such the names of the arguments differ and is incompatible with C.\n\nArguments\n\ntype::Symbol: Location is either at :geocenter, on the :surface of Earth, or in :space.\n\nIn space implies on a near-earth spacecraft.\n\nloc::Union{OnSurface,InSpace}: Location of observer\n\n\n\n\n\n","category":"type"},{"location":"api/#NOVAS.OnSurface","page":"API","title":"NOVAS.OnSurface","text":"OneSurface(lat,lon,h,temp,p)\n\nStructure holding the observer's location on the surface of the Earth.  Atmospheric parameters are optional and are only used by equ2hor in the calculation of refraction.\n\nArguments\n\nlatitude::Real: ITRS latitude in degrees; north positive\nlongitude::Real: ITRS longitude in degrees; east positive\nheight::Real: Height of observer (meters)\ntemperature::Real=0: Temperature (degrees Celsius)\npressure::Real=0: Atmospheric pressure (millibars)\n\n\n\n\n\n","category":"type"},{"location":"api/#NOVAS.SkyPos","page":"API","title":"NOVAS.SkyPos","text":"The sky position of a celestial object.\n\nArguments\n\nr̂::AbstractVector: Unit vector towards object\nra::Real: Apparent right ascension in hours\ndec::Real: Apparent declination in degrees\ndis::Real: True distance to solar systm body in AU\nrv::Real: Radial velocity in km/s\n\n\n\n\n\n","category":"type"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Calculating-Sidereal-Time","page":"Examples","title":"Calculating Sidereal Time","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"In this example, we will calculate the Greenwich mean sidereal time.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using NOVAS","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"First, we need to pull in AstroTime.jl to give us the most preceise time correction data and transformations. We will also call it's update routine.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using AstroTime\nAstroTime.update()","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Next, we will use the current Julian UT1 date.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"ut1_now = from_utc(now(); scale=UT1)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Then, we will use AstroTime to convert this date to a Julian date and give us the current offset to Terrestrial Time","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"jd_high, jd_low = value.(julian_twopart(ut1_now))\nΔT = getoffset(ut1_now, TT)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Finally, we will call sidereal_time to find the Greenwich mean sidereal time using the CIO method with full accuracy","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"sidereal_time(jd_high, jd_low, ΔT)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"And because this is Julia, we can easily compose with other libraries, like Measurements.jl. For example, we can add uncertainty data to ΔT and see how it impacts our results","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Measurements\nsidereal_time(jd_high, jd_low, ΔT ± 3)","category":"page"},{"location":"examples/#Position-of-a-Star","page":"Examples","title":"Position of a Star","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This is adapted from the NOVASC manual, Example 1 in Chapter 3.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Suppose we have the catalog data from star HD 103095 (Groombridge 1830) for epoch J2000.0, expressed in the ICRS. We find this by pulling up its entry in something like SIMBAD. We can pull in a library like AstroAngles to simplify some of the angle conversions.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using NOVAS","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using AstroAngles\n\nra = hms\"11:52:58.7683801554\"ha\ndec = dms\"37:43:7.240082865\"deg\nμα = 4002.567\nμδ = -5817.856\nplax = 108.9551\nv_rad = -98.008","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Unlike the C version of NOVAS, we don't need to call make_cat_entry as we can make an instance of the struct at runtime.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"gmb_1830 = CatEntry(\"GMB 1830\", \"HD\", 103095, ra, dec, μα, μδ, plax, v_rad)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Then, we call app_star to compute the apparent place of the star at a date jd_tt.","category":"page"},{"location":"examples/#Solar-System-Diagram","page":"Examples","title":"Solar System Diagram","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"import UUIDs\nusing NOVAS, PlotlyJS\n\nfunction documenter_plotly(plt)\n    uuid = UUIDs.uuid4()\n    html = \"\"\"\n        <div id=\\\"$(uuid)\\\"></div>\n        <script>\n        PLOT = document.getElementById('$(uuid)');\n        Plotly.newPlot(PLOT, $(string(plt.plot.data)), $(string(plt.plot.layout)), {scrollZoom: true});\n        </script>\n    \"\"\"\n    HTML(html)\nend\n\nregister_spk!(de440())\n\ndays = 60 * 60 * 24\nyear = days * 365\nyears = 0:days:(2year)\n\nget_planet_position(planet) = hcat((first.(state.(years, planet, 0)))...)\n\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]\n\ntraces = GenericTrace[]\n\ntrace_orbit(x, y, z, name) = scatter3d(; x=x, y=y, z=z, mode=\"lines\", name=name)\n\n# Plot the Sun!\npush!(traces,\n      scatter3d(; x=[0], y=[0], z=[0], name=\"Solar System Barycenter\",\n                marker=attr(; color=\"yellow\", size=5, symbol=\"diamond\")))\n\nfor (i, planet) in enumerate(planets)\n    position = get_planet_position(i)\n    push!(traces, trace_orbit(position[1, :], position[2, :], position[3, :], planet))\nend\n\n# Plot the moon\nmoon_from_earth = hcat((first.(state.(years, 301, 3)))...)\nearth = get_planet_position(3)\nmoon = moon_from_earth + earth\npush!(traces, trace_orbit(moon[1, :], moon[2, :], moon[3, :], \"Luna\"))\n\nlayout = Layout(; plot_bgcolor=\"black\", paper_bgcolor=\"black\",\n                legend=attr(; font=attr(; color=\"white\")), font=attr(; color=\"white\"),\n                scene=attr(; xaxis=attr(; visible=false), yaxis=attr(; visible=false),\n                           zaxis=attr(; visible=false)))\n\n\nplt = plot(traces, layout)\ndocumenter_plotly(plt)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = NOVAS","category":"page"},{"location":"#NOVAS","page":"Home","title":"NOVAS","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NOVAS.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"examples.md\", \"benchmarks.md\", \"api.md\"]\nDepth = 3","category":"page"}]
}
